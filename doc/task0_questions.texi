@enumerate  

@item Which Git command should you run to retrieve a copy of your group's shared Pintos repository in your local directory? 
@tex 
  \hfill {\bf (1~mark)} 
@end tex

@item Why is using the strcpy() function to copy strings usually a bad idea?
(@dfn{Hint: identify the problem, give details and discuss possible solutions.}) 
@tex 
  \hfill {\bf (2~marks)}
@end tex

@item Explain how thread scheduling in Pintos currently works in less than 300 words. Include the chain of execution of function calls. 
(@dfn{Hint: we expect you to at least mention which functions participate in a context switch, how they interact, how and when the thread state is modified and the role of interrupts.})

thread_block() sets the current thread to THREAD_BLOCKED and then calls schedule() to switch threads.
thread_yield() sets the current thread to THREAD_READY adding it to the end of the queue (ready_queue) and then calls schedule() to switch threads. 
thread_exit() sets the current thread to THREAD_DYING and then calls schedule() which then kills the current thread.

When schedule() is called it gets the currently running thread using running_thread() and the next thread to run using next_thread_to_run().

The function then asserts that the interrupts have been turned off via the function intr_get_level(). It checks that the current thread has been set to a status which is not THREAD_RUNNING, before then asserting that the next thread to run is valid using is_thread().

If the next thread is not equal to the current thread. It switches to it using switch_threads() and sets previous to the current thread. 
Finally, thread_schedule_tail() is called on previous.

thread_schedule_tail() finishes the switch by setting the current thread's status to THREAD_RUNNING and killing the previous thread if its status is THREAD_DYING.

@tex 
  \hfill {\bf (6~marks)}
@end tex

@item Explain the property of reproducibility and how the lack of reproducibility will affect debugging.
@tex 
  \hfill {\bf (2~marks)}
@end tex

@item How would you print an unsigned 64 bit @code{int}? 
(Consider that you are working with C99). Don't forget to state any inclusions needed by your code.
@tex 
  \hfill {\bf (2~marks)}
@end tex

@item Describe the data structures and functions that locks and semaphores in Pintos have in common. What extra property do locks have that semaphores do not?
@tex 
  \hfill {\bf (3~marks)}
@end tex

@item In Pintos, a thread is characterized by a struct and an execution stack. What are the limitations on the size of these data structures? Explain how this relates to stack overflow and how Pintos identifies it.

The struct and execution stack are stored in their own 4 kB page with the stack located above the struct. The size of the execution stack is restricted by the struct (size of execution stack = 4kB - execution stack). The size of the struct should remain at a minimum to allow the stack as much space as possible to grow. The smaller the stack the greater probability of a stack overflow. Pintos detects these by checking whether the 'magic' member of the running thread's 'struct thread' has changed from THREAD_MAGIC. The 'magic' member is located at the bottom of the struct and therefore will be the first data member to be overwritten by the stack overflow.

@tex
  \hfill {\bf (3~marks)}
@end tex

@item If test @file{src/tests/devices/alarm-multiple} fails, where would you find its output and result logs? Provide both paths and file names.
(@dfn{Hint : you might want to run this test to find out.})
pintos_03/src/devices/build/tests/devices/alarm-multiple.output
pintos_03/src/devices/build/tests/devices/alarm-multiple.result
@tex
  \hfill {\bf (1~mark)}
@end tex

@item 
Reimplement @code{timer_sleep()}, defined in @file{devices/timer.c}.
@tex
  \hfill {\bf (20~marks)}
@end tex

Although a working implementation of @code{timer_sleep} is provided, it "busy waits", that is, it spins in a loop checking the current time and calling @code{thread_yield()} until enough time has gone by. 
Reimplement it to avoid busy waiting (@b{10 marks}). 
Further instructions and hints can be found in the Pintos manual.

You also need to provide a design document which answers the following questions:  

@itemize @w{}
@item @b{Data Structures}

A1: (@b{2 marks}) Copy here the declaration of each new or changed `@code{struct}' or `@code{struct}' member, global or static variable, `@code{typedef}', or enumeration. Identify the purpose of each in 25 words or less.

@item @b{Algorithms}

A2: (@b{2 marks}) Briefly describe what happens in a call to @code{timer_sleep()}, including the actions performed by the timer interrupt handler on each timer tick.
 
A3: (@b{2 marks}) What steps are taken to minimize the amount of time spent in the timer interrupt handler?

@item @b{Synchronization}

A4: (@b{1 mark}) How are race conditions avoided when multiple threads call @code{timer_sleep()} simultaneously?

A5: (@b{1 mark}) How are race conditions avoided when a timer interrupt occurs during a call to @code{timer_sleep()}?

@item @b{Rationale}

A6: (@b{2 marks}) Why did you choose this design?  
In what ways is it superior to another design you considered?

@end itemize

@end enumerate
